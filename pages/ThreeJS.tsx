import React,{useEffect,useMemo, useRef, useLayoutEffect,useState} from 'react'
//import * as THREE from "@react-three/fiber"
import { Canvas,useFrame, ThreeElements  } from '@react-three/fiber'
import { useGLTF, OrbitControls,Torus } from '@react-three/drei';// convert models to react
//import { useRef } from 'react';//also for models-- supposedly autogenerated
import { extend } from '@react-three/fiber'
//import { FontLoader } from 'three/examples/jsm/loaders/FontLoader'
//import { TextGeometry } from 'three/examples/jsm/geometries/TextGeometry'
//import myFont from '../relative_path'
import SpringBox from '../components/3d/SpringBox'
//extend({ TextGeometry })
type Props = {}
import {
    MeshDistortMaterial,
    MeshWobbleMaterial,
    Sphere,PerspectiveCamera
  } from "@react-three/drei";

//Orbt Controls adds rotation to the center of the render
//ambient light adds lighting 
//fog adds fog?
  function ThreeScene() {
    return (//adds lighting to my objects
      <>
        <ambientLight />
        <pointLight position={[5, 5, 5]} intensity={1} />
        <pointLight position={[-3, -3, 2]} />
        <OrbitControls />  
        <fog attach="fog" args={["#000",2,10]} />
      </>
    );
  }


const ThreeJS = (props: Props) => {
  const [camp,setCamp]=useState("[0,0,7]")
    useEffect(()=>{
        /*const scene= new THREE.Scene();//this is three.js code, equivalent is our mesh
        const camera= new THREE.PerspectiveCamera(
            50,
            window.innerWidth /window.innerHeight, 
            1, 
            1000
            );
*/
    },[])
    //you can change camera values by using camera props with CANVAS, OR ADD IT AS A CHILD
    // Canvas camera={{position:[0,0,7]}} or
    //using perspective camera with react-three-drei
    //makeDefault prop IS NECESSARY for perspective camera to work- it oevrrides the default canjvas camera
    //<PerspectiveCamera fov={200} position ={[0,0,10]} makeDefault/>
  return (//meshes can also be grouped
    <div>
        <div id="canvas-container"/>
        <Canvas camera={{position:[0,0,7]}}>
          
            {
                <ThreeScene />
  }
            {/*<mesh>
        <boxGeometry />
        <meshStandardMaterial />
  </mesh>*/}
        <mesh
        visible // object gets render if true
        userData={{ test: "hello" }} // An object that can be used to store custom data about the Object3d
        position={[0, 0, 0]} // The position on the canvas of the object [x,y,x]
        rotation={[0, 0, 0]} // The rotation of the object
        castShadow // Sets whether or not the object cats a shadow
        // There are many more props.....
      >
        {/* A spherical shape*/}
        <sphereGeometry attach="geometry" args={[1, 16, 200]} />
        {/* A standard mesh material*/}
        <meshStandardMaterial
          attach="material" // How the element should attach itself to its parent
          color="#7222D3" // The color of the material
          transparent // Defines whether this material is transparent. This has an effect on rendering as transparent objects need special treatment and are rendered after non-transparent objects. When set to true, the extent to which the material is transparent is controlled by setting it's .opacity property.
          roughness={0.1} // The roughness of the material - Defaults to 1
          metalness={0.1} // The metalness of the material - Defaults to 0
        />
      </mesh>
      {/*An ambient light that creates a soft light against the object */}
      <ambientLight intensity={0.5} />
      {/*An directional light which aims form the given position */}
      <directionalLight position={[10, 10, 5]} intensity={1} />
      {/*An point light, basically the same as directional. This one points from under */}
      <pointLight position={[0, -10, 5]} intensity={1} />

        {/* We can use the drei Sphere which has a simple API. This sphere has a wobble material attached to it */}
         { /*@ts-ignore */}
      <Sphere visible position={[-3, 0, 0]} args={[1, 16, 200]}>
        <MeshWobbleMaterial
          attach="material"
          color="#EB1E99"
          factor={1} // Strength, 0 disables the effect (default=1)
          speed={2} // Speed (default=1)
          roughness={0}
        />
      </Sphere>

        {/* This sphere has a distort material attached to it */}
        { /*@ts-ignore */}
      <Sphere visible position={[3, 0, 0]} args={[1, 16, 200]}>{/* @ts-ignore  */}
        <MeshDistortMaterial
          color="#00A38D"
          attach="material"
          distort={0.5} // Strength, 0 disables the effect (default=1)
          speed={2} // Speed (default=1)
          roughness={0}
        />
        
        </Sphere>
        {<SpringBox 
        />}
        </Canvas>
  
    </div>
  )
}

export default ThreeJS